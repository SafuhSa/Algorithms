// https://www.hackerrank.com/challenges/recursive-digit-sum/problem

// function superDigit(n, k) {
//   if ((n * k) < 11) return (n * k);

//   if (n < 11) {
//     return superDigit(n * k, 1);
//   } else {
//     let rem = n % 10;
//     n = Math.floor(n / 10);
//     return superDigit(n + rem, k);
//   }
// }
function superDigit(n, k) {
  if (n < 11) {
    n *= k;
    k = 1;
  }
  while (n > 10) {
    // console.log('da', n)
    let temp = n + '';
    let sum = temp.split('').reduce((acc, num) => acc+Number(num), 0);
    n = Number(sum);
    // let rem = n % 10;
    // n = Math.floor(n / 10) + rem;

    if (n < 11) {
      n *= k;
      k = 1;
    }
  }
  return n
}

function superDigit(n, k) {
  if (n < 10) {
    return n;
  }

  return superDigit(
    n
      .toString()
      .split('')
      .reduce((sum, num) => sum + (num | 0), 0) * k,
    1);
}
let n = 148;
let k = 3;
let res = 3;
// console.log(n, k, 'output', superDigit(n, k), 'expected', res);
n = 9875;
k = 4;
res = 8;
console.log(n, k, 'output', superDigit(n, k), 'expected', res);
n = 123;
k = 3;
res = 9;
console.log(n, k, 'output', superDigit(n, k), 'expected', res);
n = 7404954009694227446246375747227852213692570890717884174001587537145838723390362624487926131161112710589127423098959327020544003395792482625191721603328307774998124389641069884634086849138515079220750462317357487762780480576640689175346956135668451835480490089962406773267569650663927778867764315211280625033388271518264961090111547480467065229843613873499846390257375933040086863430523668050046930387013897062106309406874425001127890574986610018093859693455518413268914361859000614904461902442822577552997680098389183082654625098817411306985010658756762152160904278169491634807464356130877526392725432086439934006728914411061861235300979536190100734360684054557448454640750198466877185875290011114667186730452681943043971812380628117527172389889545776779555664826488520325234792648448625225364535053605515386730925070072896004645416713682004600636574389040662827182696337187610904694029221880801372864040345567230941110986028568372710970460116491983700312243090679537497139499778923997433720159174153;
k = 100000;
res = 3;
console.log(n, k, 'output', superDigit(n, k), 'expected', res);